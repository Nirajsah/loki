name: "Publish images"

on:
  push:
    branches:
      - "k[0-9]+*"
      - "main"
  workflow_dispatch: {}

permissions:
  contents: "write"
  id-token: "write"
  pull-requests: "write"

env:
  BUILD_TIMEOUT: "60"
  GO_VERSION: "1.23.6"
  IMAGE_PREFIX: "grafana"
  RELEASE_LIB_REF: "main"
  RELEASE_REPO: "grafana/loki"

jobs:
  check:
    uses: "grafana/loki-release/.github/workflows/check.yml@main"
    with:
      build_image: "grafana/loki-build-image:0.34.5"
      golang_ci_lint_version: "v1.60.3"
      release_lib_ref: "main"
      skip_validation: false
      use_github_app_token: true

  loki-canary-boringcrypto:
    needs: [check]
    uses: ./.github/workflows/docker-build.yml
    with:
      image_name: loki-canary-boringcrypto
      dockerfile_path: cmd/loki-canary-boringcrypto/Dockerfile
      release_lib_ref: main
      release_repo: grafana/loki

  loki-canary:
    needs: [check]
    uses: ./.github/workflows/docker-build.yml
    with:
      image_name: loki-canary
      dockerfile_path: cmd/loki-canary/Dockerfile
      release_lib_ref: main
      release_repo: grafana/loki

  loki:
    needs: [check]
    uses: ./.github/workflows/docker-build.yml
    with:
      image_name: loki
      dockerfile_path: cmd/loki/Dockerfile
      release_lib_ref: main
      release_repo: grafana/loki

  promtail:
    needs: [check]
    uses: ./.github/workflows/docker-build.yml
    with:
      image_name: promtail
      dockerfile_path: clients/cmd/promtail/Dockerfile
      release_lib_ref: main
      release_repo: grafana/loki

  lambda-promtail-image:
    needs:
      - check
    runs-on: "${{ matrix.runs_on }}"
    env:
      BUILD_TIMEOUT: 60
      GO_VERSION: "1.23.6"
      IMAGE_PREFIX: "public.ecr.aws/grafana"
      RELEASE_LIB_REF: "main"
      RELEASE_REPO: "grafana/loki"
      REPO: "loki"

    outputs:
      image_digest_linux_amd64: "${{ steps.digest.outputs.digest_linux_amd64 }}"
      image_digest_linux_arm64: "${{ steps.digest.outputs.digest_linux_arm64 }}"
      image_name: "${{ steps.weekly-version.outputs.image_name }}"
      image_tag: "${{ steps.weekly-version.outputs.image_version }}"

    steps:
    - name: "pull release library code"
      uses: "actions/checkout@v4"
      with:
        path: "lib"
        ref: "${{ env.RELEASE_LIB_REF }}"
        repository: "grafana/loki-release"
    - name: "pull code to release"
      uses: "actions/checkout@v4"
      with:
        path: "release"
        repository: "${{ env.RELEASE_REPO }}"
    - name: "setup node"
      uses: "actions/setup-node@v4"
      with:
        "node-version": "20"
    - name: "Set up Docker buildx"
      uses: "docker/setup-buildx-action@v3"
    - name: "get-secrets"
      uses: "grafana/shared-workflows/actions/get-vault-secrets@get-vault-secrets-v1.1.0"
      with:
        repo_secrets: |
          ECR_ACCESS_KEY=aws-credentials:access_key_id
          ECR_SECRET_KEY=aws-credentials:secret_access_key
    - name: "Configure AWS credentials"
      uses: "aws-actions/configure-aws-credentials@v4"
      with:
        aws-access-key-id: "${{ env.ECR_ACCESS_KEY }}"
        aws-region: "us-east-1"
        aws-secret-access-key: "${{ env.ECR_SECRET_KEY }}"
    - name: "Login to Amazon ECR Public"
      uses: "aws-actions/amazon-ecr-login@v2"
      with:
        registry-type: "public"
    - id: "weekly-version"
      name: "Get weekly version"
      run: |
        version=$(./tools/image-tag)
        echo "image_version=$version" >> $GITHUB_OUTPUT
        echo "image_name=${{ env.IMAGE_PREFIX }}/lambda-promtail" >> $GITHUB_OUTPUT
        echo "image_full_name=${{ env.IMAGE_PREFIX }}/lambda-promtail:$version" >> $GITHUB_OUTPUT
      working-directory: "release"
    - id: "prepare-tag"
      name: "Prepare tag name"
      run: |
        arch=$(echo ${{ matrix.arch }} | cut -d'/' -f2)
        echo "IMAGE_TAG=${{ steps.weekly-version.outputs.image_name }}:${{ steps.weekly-version.outputs.image_version }}-${arch}" >> $GITHUB_OUTPUT
    - id: "build-push"
      name: "Build and push"
      timeout-minutes: "${{ fromJSON(env.BUILD_TIMEOUT) }}"
      uses: "docker/build-push-action@v6"
      with:
        build-args: |
          IMAGE_TAG=${{ steps.weekly-version.outputs.image_version }}
          GO_VERSION=${{ env.GO_VERSION }}
        context: "release"
        file: "release/tools/lambda-promtail/Dockerfile"
        outputs: "type=image,push=true"
        platform: "${{ matrix.arch }}"
        provenance: false
        tags: "${{ steps.prepare-tag.outputs.IMAGE_TAG }}"
